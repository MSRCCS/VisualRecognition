ConvBNLayerW(W, inp, kW, kH, inMap, outMap, hStride, vStride, pad, bValue, scValue, bnTimeConst) =
[
    b = Parameter(outMap, 1, init = "fixedValue", value = bValue)
    sc = Parameter(outMap, 1, init = "fixedValue", value = scValue)
    m = Parameter(outMap, 1, init = "fixedValue", value = 0, learningRateMultiplier = 0)
    isd = Parameter(outMap, 1, init = "fixedValue", value = 0, learningRateMultiplier = 0)
    
    c = NDConvolution(W, inp, (kW : kH : inMap), (1 : 1 : outMap), stride = (hStride : vStride : inMap), autoPadding = (pad : pad : false), imageLayout = "cudnn")
    out = BatchNormalization(c, sc, b, m, isd, false, true, normalizationTimeConstant = bnTimeConst, epsilon = 0.000000001, imageLayout = "cudnn")
]

ConvBNLayer(inp, kW, kH, inMap, outMap, hStride, vStride, pad, wScale, bValue, scValue, bnTimeConst) =
[
    W = LearnableParameter(outMap, kW * kH * inMap, init = "gaussian", initValueScale = wScale)
    out = ConvBNLayerW(W, inp, kW, kH, inMap, outMap, hStride, vStride, pad, bValue, scValue, bnTimeConst).out
]

ConvBNReLULayer(inp, kW, kH, inMap, outMap, hStride, vStride, pad, wScale, bValue, scValue, bnTimeConst) =
[
    c = ConvBNLayer(inp, kW, kH, inMap, outMap, hStride, vStride, pad, wScale, bValue, scValue, bnTimeConst).out
    out = RectifiedLinear(c)
]

# Standard building block for ResNet with identity shortcut (option A).
ResNetNode2A(inp, kW, kH, inMap, outMap, wScale, bValue, scValue, bnTimeConst) =
[
    # First convolution layer.
    c1 = ConvBNReLULayer(inp, kW, kH, inMap, outMap, 1, 1, true, wScale, bValue, scValue, bnTimeConst).out
    # Second convolution layer, no ReLU.
    c2 = ConvBNLayer(c1, kW, kH, inMap, outMap, 1, 1, true, wScale, bValue, scValue, bnTimeConst).out
    # Identity shortcut.
    p = Plus(c2, inp)
    out = RectifiedLinear(p)
]

# Standard building block for ResNet with padding (option A).
ResNetNode2AInc(inp, kW, kH, inMap, outMap, wScale, bValue, scValue, bnTimeConst, Wproj) =
[
    # First convolution layer.
    c1 = ConvBNReLULayer(inp, kW, kH, inMap, outMap, 2, 2, true, wScale, bValue, scValue, bnTimeConst).out
    # Second convolution layer, no ReLU.
    c2 = ConvBNLayer(c1, kW, kH, outMap, outMap, 1, 1, true, wScale, bValue, scValue, bnTimeConst).out
    
    # Projection convolution layer.
    c_proj = ConvBNLayerW(Wproj, inp, 1, 1, inMap, outMap, 2, 2, false, bValue, scValue, bnTimeConst).out
    
    p = Plus(c2, c_proj)
    out = RectifiedLinear(p)
]

# Standard building block for ResNet with padding (option B).
ResNetNode2BInc(inp, kW, kH, inMap, outMap, wScale, bValue, scValue, bnTimeConst) =
[
    # First convolution layer.
    c1 = ConvBNReLULayer(inp, kW, kH, inMap, outMap, 2, 2, true, wScale, bValue, scValue, bnTimeConst).out
    # Second convolution layer, no ReLU.
    c2 = ConvBNLayer(c1, kW, kH, outMap, outMap, 1, 1, true, wScale, bValue, scValue, bnTimeConst).out
    
    # Projection convolution layer.
    c_proj = ConvBNLayer(inp, 1, 1, inMap, outMap, 2, 2, false, wScale, bValue, scValue, bnTimeConst).out
    
    p = Plus(c2, c_proj)
    out = RectifiedLinear(p)
]

# Bottleneck building block for ResNet.
ResNetNode3A(inp, inMap, convMap, outMap, convWCount, wScale, bValue, scValue, bnTimeConst) =
[
    # 1x1 reducing convolution.
    c1 = ConvBNReLULayer(inp, convMap, inMap, 1, 1, 1, 1, false, wScale, bValue, scValue, bnTimeConst).out
    # 3x3 convolution.
    c2 = ConvBNReLULayer(c1, convMap, convWCount, 3, 3, 1, 1, true, wScale, bValue, scValue, bnTimeConst).out
    # 1x1 expanding convolution, no ReLU.
    c3 = ConvBNLayer(c2, outMap, convMap, 1, 1, 1, 1, false, wScale, bValue, scValue, bnTimeConst).out
    
    p = Plus(c3, inp)
    out = RectifiedLinear(p)
]

ResNetNode3AInc(inp, inMap, convMap, outMap, convWCount, wScale, bValue, scValue, bnTimeConst, wProj, projStride) =
[
    # 1x1 reducing convolution.
    c1 = ConvBNReLULayer(inp, convMap, inMap, 1, 1, projStride, projStride, false, wScale, bValue, scValue, bnTimeConst).out
    # 3x3 convolution.
    c2 = ConvBNReLULayer(c1, convMap, convWCount, 3, 3, 1, 1, true, wScale, bValue, scValue, bnTimeConst).out
    # 1x1 expanding convolution, no ReLU.
    c3 = ConvBNLayer(c2, outMap, convMap, 1, 1, 1, 1, false, wScale, bValue, scValue, bnTimeConst).out
    # Input-to-output mapping convolution.
    c_proj = ConvBNLayerW(wProj, inp, outMap, 1, 1, projStride, projStride, false, wScale, bValue, scValue, bnTimeConst).out
    
    p = Plus(c3, c_proj)
    out = RectifiedLinear(p)
]

ResNetNode3BInc(inp, inMap, convMap, outMap, convWCount, wScale, bValue, scValue, bnTimeConst, projStride) =
[
    # 1x1 reducing convolution.
    c1 = ConvBNReLULayer(inp, convMap, inMap, 1, 1, projStride, projStride, false, wScale, bValue, scValue, bnTimeConst).out
    # 3x3 convolution.
    c2 = ConvBNReLULayer(c1, convMap, convWCount, 3, 3, 1, 1, true, wScale, bValue, scValue, bnTimeConst).out
    # 1x1 expanding convolution, no ReLU.
    c3 = ConvBNLayer(c2, outMap, convMap, 1, 1, 1, 1, false, wScale, bValue, scValue, bnTimeConst).out
    # Input-to-output mapping convolution.
    c_proj = ConvBNLayer(inp, outMap, inMap, 1, 1, projStride, projStride, false, wScale, bValue, scValue, bnTimeConst).out
    
    p = Plus(c3, c_proj)
    out = RectifiedLinear(p)
]

DnnLayer(hiddenDim, labelDim, x, wScale, bValue) =
[
    W = LearnableParameter(labelDim, hiddenDim, init = "gaussian",   initValueScale = wScale)
    b = LearnableParameter(labelDim, 1,         init = "fixedValue", value = bValue)
    t = Times(W, x)
    out = Plus(t, b)
]
